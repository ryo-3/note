import { useEffect, useRef, useMemo, useCallback, useState } from "react";
import { useAuth } from "@clerk/nextjs";
import { useNavigation } from "@/contexts/navigation-context";

const API_URL = process.env.NEXT_PUBLIC_API_URL;

type IconStateKey =
  | "home"
  | "memo"
  | "task"
  | "board"
  | "boardDetail"
  | "search"
  | "settings"
  | "team";

export interface ConditionalPollingOptions<T> {
  endpoint: string;
  iconStateKey: IconStateKey;
  additionalConditions?: Record<string, boolean>;
  onUpdate: (data: T) => void;
  onError?: (error: Error) => void;
  waitTimeoutSec?: number;
  enabled?: boolean;
}

export function useConditionalPolling<T>({
  endpoint,
  iconStateKey,
  additionalConditions = {},
  onUpdate,
  onError,
  waitTimeoutSec = 120,
  enabled = true,
}: ConditionalPollingOptions<T>) {
  const { getToken } = useAuth();
  const { iconStates } = useNavigation();
  const abortControllerRef = useRef<AbortController | null>(null);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const [isPageVisible, setIsPageVisible] = useState(true); // SSRÂØæÂøú„ÅÆ„Åü„ÇÅ„Éá„Éï„Ç©„É´„Éàtrue

  // „Éö„Éº„Ç∏„ÅÆÂèØË¶ñÊÄß„ÇíÁõ£Ë¶ñ
  useEffect(() => {
    if (typeof window === "undefined") return; // SSRÊôÇ„ÅØ„Çπ„Ç≠„ÉÉ„Éó

    const handleVisibilityChange = () => {
      setIsPageVisible(!document.hidden);
    };

    // ÂàùÊúüÂÄ§„ÇíË®≠ÂÆö
    setIsPageVisible(!document.hidden);

    document.addEventListener("visibilitychange", handleVisibilityChange);
    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, []);

  // Êù°‰ª∂Âà§ÂÆö
  const shouldPoll = useMemo(() => {
    if (!enabled) return false;

    // „Ç∞„É≠„Éº„Éê„É´ÈÄöÁü•„ÅÆÂ†¥Âêà„ÅØÂ∏∏„Å´ÂÆüË°å
    if (additionalConditions.alwaysEnabled) {
      console.log("üåê Always enabled polling - shouldPoll: true", {
        endpoint,
        iconStateKey,
        additionalConditions,
      });
      return true;
    }

    const baseCondition = iconStates[iconStateKey]; // „Ç¢„Ç§„Ç≥„É≥„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åã
    const visibilityCondition = isPageVisible; // „Éö„Éº„Ç∏„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åã
    const otherConditions = Object.values(additionalConditions).every(
      (condition) => condition === true,
    );

    // „ÉÅ„Éº„É†Áî≥Ë´ãÁõ£Ë¶ñ„ÅÆÂ†¥Âêà„ÅØ„ÄÅÁâπÂà•„Å´„ÉÅ„Éº„É†Ë©≥Á¥∞„Éö„Éº„Ç∏ÂÜÖ„Åß„ÅØÂ∏∏„Å´Áõ£Ë¶ñ„Åô„Çã
    const isTeamPolling =
      iconStateKey === "team" && additionalConditions.onTeamPage;
    const effectiveBaseCondition = isTeamPolling ? true : baseCondition;

    // „ÉÅ„Éº„É†ÈÄöÁü•„ÅÆÂ†¥Âêà„ÅØ‰ªñ„Çø„Éñ„Åß„ÇÇÈÄöÁü•„ÇíÊúâÂäπ„Å´„Åô„Çã
    const effectiveVisibilityCondition =
      iconStateKey === "team" ? true : visibilityCondition;

    return (
      effectiveBaseCondition && effectiveVisibilityCondition && otherConditions
    );
  }, [iconStates, iconStateKey, additionalConditions, enabled, isPageVisible]);

  // „Éù„Éº„É™„É≥„Ç∞ÂÆüË°åÈñ¢Êï∞
  const executePoll = useCallback(async () => {
    if (!shouldPoll) return;

    try {
      // Êó¢Â≠ò„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„Çí„Ç≠„É£„É≥„Çª„É´
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }

      // Êñ∞„Åó„ÅÑAbortController‰ΩúÊàê
      const abortController = new AbortController();
      abortControllerRef.current = abortController;

      const token = await getToken();
      const requestUrl = `${API_URL}${endpoint}`;
      const requestBody = {
        lastCheckedAt: new Date().toISOString(),
        waitTimeoutSec,
      };

      // console.log("üöÄ Polling request details:", {
      //   url: requestUrl,
      //   method: "POST",
      //   hasToken: Boolean(token),
      //   body: requestBody,
      //   apiUrl: API_URL,
      //   endpoint: endpoint,
      // });

      const response = await fetch(requestUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...(token && { Authorization: `Bearer ${token}` }),
        },
        body: JSON.stringify(requestBody),
        signal: abortController.signal,
      });

      // „É™„ÇØ„Ç®„Çπ„Éà„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„ÅüÂ†¥Âêà
      if (abortController.signal.aborted) {
        return;
      }

      // console.log("üì• Polling response:", {
      //   status: response.status,
      //   statusText: response.statusText,
      //   ok: response.ok,
      //   url: response.url,
      //   headers: Object.fromEntries(response.headers.entries()),
      // });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå Polling request failed:", {
          status: response.status,
          statusText: response.statusText,
          body: errorText,
          url: response.url,
        });
        throw new Error(
          `HTTP ${response.status}: ${response.statusText} - ${errorText}`,
        );
      }

      // console.log("üîç About to parse JSON response...");
      const data = await response.json();
      // console.log("‚úÖ JSON parsed successfully:", data);

      // Êõ¥Êñ∞„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„Åø„É≠„Ç∞Âá∫Âäõ
      if (data.hasUpdates) {
        console.log("üîÑ Calling onUpdate with:", data.updates);
        onUpdate(data.updates);
      } else if (
        data &&
        typeof data === "object" &&
        !data.hasUpdates &&
        Object.keys(data).length > 0
      ) {
        console.log(
          "üîÑ Direct update data detected, calling onUpdate with:",
          data,
        );
        onUpdate(data);
      }
      // Êõ¥Êñ∞„Å™„Åó„ÅÆÂ†¥Âêà„ÅØ„É≠„Ç∞Âá∫Âäõ„Åó„Å™„ÅÑÔºà„Éé„Ç§„Ç∫ÂâäÊ∏õÔºâ

      // Êù°‰ª∂„ÅåÊ∫Ä„Åü„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÂÜçÂ∫¶„Éù„Éº„É™„É≥„Ç∞
      if (shouldPoll) {
        timeoutRef.current = setTimeout(() => {
          executePoll();
        }, 5000); // 5ÁßíÂæå„Å´ÂÜçÂÆüË°åÔºàË≤†Ëç∑ËªΩÊ∏õÔºâ
      }
    } catch (error) {
      if (error instanceof Error && error.name === "AbortError") {
        // „Ç≠„É£„É≥„Çª„É´„Åï„Çå„ÅüÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
        return;
      }

      // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅØË©≥Á¥∞„É≠„Ç∞„ÇíÈÅø„Åë„ÇãÔºàÈñãÁô∫‰∏≠„ÅÆÈ†ªÁπÅ„Å™Êé•Á∂ö„Ç®„É©„Éº„ÇíËªΩÊ∏õÔºâ
      if (error instanceof Error && error.message === "Failed to fetch") {
        // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„Ç®„É©„Éº„ÅØËªΩÂæÆ„Å™„É≠„Ç∞„Å´„Åô„Çã
        console.debug("„Éù„Éº„É™„É≥„Ç∞Êé•Á∂ö„Ç®„É©„ÉºÔºà„É™„Éà„É©„Ç§‰∏≠Ôºâ");
      } else {
        console.error(
          "Conditional polling error:",
          error instanceof Error ? error.message : String(error),
        );
      }
      if (onError) {
        onError(error as Error);
      }

      // „Ç®„É©„ÉºÊôÇ„ÅØ10ÁßíÂæå„Å´„É™„Éà„É©„Ç§ÔºàÊù°‰ª∂„ÅåÊ∫Ä„Åü„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
      if (shouldPoll) {
        timeoutRef.current = setTimeout(() => {
          executePoll();
        }, 10000);
      }
    }
  }, [shouldPoll, endpoint, getToken, waitTimeoutSec, onUpdate, onError]);

  // „Éù„Éº„É™„É≥„Ç∞ÈñãÂßã„ÉªÂÅúÊ≠¢Âà∂Âæ°
  useEffect(() => {
    if (shouldPoll) {
      // „Éù„Éº„É™„É≥„Ç∞ÈñãÂßã
      executePoll();
    } else {
      // „Éù„Éº„É™„É≥„Ç∞ÂÅúÊ≠¢
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
        abortControllerRef.current = null;
      }
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    }

    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, [shouldPoll, executePoll]);

  // ÈáçË§á„Åô„Çãvisibilitychange„É™„Çπ„Éä„Éº„ÅØÂâäÈô§Ôºà‰∏ä„ÅßÂÆüË£ÖÊ∏à„ÅøÔºâ

  return {
    isPolling: shouldPoll,
    conditions: {
      iconActive: iconStates[iconStateKey],
      pageVisible: isPageVisible,
      additionalConditions,
    },
  };
}
