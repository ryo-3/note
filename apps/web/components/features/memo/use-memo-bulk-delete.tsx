import { useBulkDelete, BulkDeleteConfirmation } from "@/components/ui/modals";
import { useDeleteNote, usePermanentDeleteNote } from "@/src/hooks/use-notes";
import type { DeletedMemo, Memo } from "@/src/types/memo";
import {
  animateMultipleItemsToTrash,
  animateMultipleItemsToTrashWithRect,
} from "@/src/utils/deleteAnimation";
import { useEffect, useRef } from "react";
import React from "react";

interface UseMemosBulkDeleteProps {
  activeTab: "normal" | "deleted";
  checkedMemos: Set<number>;
  checkedDeletedMemos: Set<number>;
  setCheckedMemos: (memos: Set<number>) => void;
  setCheckedDeletedMemos: (memos: Set<number>) => void;
  notes?: Memo[];
  deletedNotes?: DeletedMemo[];
  localMemos: Memo[];
  onMemoDelete?: (id: number) => void;
  deleteButtonRef?: React.RefObject<HTMLButtonElement | null>;
  setIsDeleting?: (isDeleting: boolean) => void;
  setIsLidOpen?: (isOpen: boolean) => void;
}

export function useMemosBulkDelete({
  activeTab,
  checkedMemos,
  checkedDeletedMemos,
  setCheckedMemos,
  setCheckedDeletedMemos,
  notes,
  deletedNotes,
  localMemos,
  onMemoDelete,
  deleteButtonRef,
  setIsDeleting,
  setIsLidOpen,
}: UseMemosBulkDeleteProps) {
  const deleteNoteMutation = useDeleteNote();
  const permanentDeleteNoteMutation = usePermanentDeleteNote();
  const bulkDelete = useBulkDelete();
  
  // „Çø„Ç§„Éû„ÉºID„Çí‰øùÊåÅ
  const timerRef = useRef<{ isDeleting?: NodeJS.Timeout; clearChecked?: NodeJS.Timeout }>({});

  // „ÉÅ„Çß„ÉÉ„ÇØÁä∂ÊÖã„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Çâ„Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
  useEffect(() => {
    if (checkedMemos.size > 0) {
      // Êñ∞„Åó„ÅÑÈÅ∏Êäû„Åå„ÅÇ„Å£„Åü„Çâ„Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
      if (timerRef.current.clearChecked) {
        clearTimeout(timerRef.current.clearChecked);
        timerRef.current.clearChecked = undefined;
      }
      if (timerRef.current.isDeleting) {
        clearTimeout(timerRef.current.isDeleting);
        timerRef.current.isDeleting = undefined;
      }
    }
  }, [checkedMemos]);

  // „ÉÅ„Çß„ÉÉ„ÇØÁä∂ÊÖã„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó - ÂâäÈô§„Åï„Çå„Åü„É°„É¢„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„ÇíËß£Èô§
  useEffect(() => {
    if (notes) {
      const allMemoIds = new Set([
        ...notes.map((m) => m.id),
        ...localMemos.map((m) => m.id),
      ]);
      const newCheckedMemos = new Set(
        Array.from(checkedMemos).filter((id) => allMemoIds.has(id))
      );
      if (newCheckedMemos.size !== checkedMemos.size) {
        setCheckedMemos(newCheckedMemos);
      }
    }
  }, [notes, localMemos, checkedMemos, setCheckedMemos]);

  useEffect(() => {
    if (deletedNotes) {
      const deletedMemoIds = new Set(deletedNotes.map((m) => m.id));
      const newCheckedDeletedMemos = new Set(
        Array.from(checkedDeletedMemos).filter((id) => deletedMemoIds.has(id))
      );
      if (newCheckedDeletedMemos.size !== checkedDeletedMemos.size) {
        setCheckedDeletedMemos(newCheckedDeletedMemos);
      }
    }
  }, [deletedNotes, checkedDeletedMemos, setCheckedDeletedMemos]);

  // ÂÖ±ÈÄö„ÅÆÂâäÈô§Âá¶ÁêÜÈñ¢Êï∞
  const executeDeleteWithAnimation = async (ids: number[]) => {
    // ÂâäÈô§„Éú„Çø„É≥„ÅÆ‰ΩçÁΩÆ„ÇíÂèñÂæó
    const buttonRect = deleteButtonRef?.current?.getBoundingClientRect();
    
    console.log('‚úÖ ÂâäÈô§Âá¶ÁêÜÈñãÂßã:', { ids: ids.length, activeTab, hasButtonRect: !!buttonRect });
    
    // ÈÄöÂ∏∏„É°„É¢„ÅÆÂâäÈô§„Åß„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÅåÂøÖË¶Å„Å™Â†¥Âêà
    if (activeTab === "normal" && buttonRect) {
      console.log('üé¨ „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã:', { ids: ids.length });
      
      // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆüË°åÔºàStateÊõ¥Êñ∞„ÅØÂÖ®„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÂæåÔºâ
      animateMultipleItemsToTrashWithRect(ids, buttonRect, async () => {
        console.log('üé¨ „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü:', { ids: ids.length });
        
        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÂæå„Å´APIÂá¶ÁêÜ
        console.log('üåê APIÈñãÂßã:', { ids: ids.length });
        for (const id of ids) {
          try {
            await deleteNoteMutation.mutateAsync(id);
          } catch (error: any) {
            // 404„Ç®„É©„Éº„ÅØÊó¢„Å´ÂâäÈô§Ê∏à„Åø„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„ÅÆ„ÅßÁÑ°Ë¶ñ
            if (!error?.message?.includes('404')) {
              console.error(`„É°„É¢ÂâäÈô§„Ç®„É©„Éº (ID: ${id}):`, error);
            }
          }
        }
        console.log('üåê APIÂÆå‰∫Ü:', { ids: ids.length });
        
        // APIÂÆå‰∫ÜÂæå„Å´StateÊõ¥Êñ∞Ôºà„Åì„Çå„Åß„É™„Çπ„Éà„Åã„ÇâÂâäÈô§Ôºâ
        console.log('üîÑ StateÊõ¥Êñ∞ÈñãÂßã:', { ids: ids.length });
        if (onMemoDelete) {
          for (const id of ids) {
            onMemoDelete(id);
          }
        }
        console.log('üîÑ StateÊõ¥Êñ∞ÂÆå‰∫Ü:', { ids: ids.length });
        
        // „ÉÅ„Çß„ÉÉ„ÇØÁä∂ÊÖã„Çí„ÇØ„É™„Ç¢
        setCheckedMemos(new Set());
        
        // 500msÂæå„Å´Ëìã„ÇíÈñâ„Åò„Çã
        setTimeout(() => {
          setIsLidOpen?.(false);
        }, 500);
        
        // ÂâäÈô§„Éú„Çø„É≥„Çí3ÁßíÂæå„Å´ÈùûË°®Á§∫
        console.log('‚è∞ „Çø„Ç§„Éû„ÉºË®≠ÂÆö:', { hasSetIsDeleting: !!setIsDeleting });
        timerRef.current.isDeleting = setTimeout(() => {
          console.log('üö´ ÂâäÈô§„Éú„Çø„É≥ÈùûË°®Á§∫ ÂÆüË°å', { hasSetIsDeleting: !!setIsDeleting });
          if (setIsDeleting) {
            setIsDeleting(false);
          } else {
            console.error('‚ùå setIsDeleting„ÅåÊú™ÂÆöÁæ©');
          }
        }, 3000);
      });
    } else {
      // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Å™„Åó„ÅÆÂ†¥Âêà„ÅØÂç≥Â∫ß„Å´Âá¶ÁêÜ
      // ÂâäÈô§Ê∏à„Åø„Ç¢„Ç§„ÉÜ„É†„ÅÆÂÆåÂÖ®ÂâäÈô§„ÅØÂç≥Â∫ß„Å´StateÊõ¥Êñ∞
      if (activeTab === "normal" && onMemoDelete) {
        for (const id of ids) {
          onMemoDelete(id);
        }
      }
      // ÈÅ∏ÊäûÁä∂ÊÖã„Çí„ÇØ„É™„Ç¢ (UIÂç≥Â∫ßÊõ¥Êñ∞)
      if (activeTab === "normal") {
        setCheckedMemos(new Set());
      } else {
        setCheckedDeletedMemos(new Set());
      }
      
      // APIÂá¶ÁêÜ„ÇíÂç≥Â∫ß„Å´ÂÆüË°å
      for (const id of ids) {
        try {
          if (activeTab === "normal") {
            await deleteNoteMutation.mutateAsync(id);
          } else {
            await permanentDeleteNoteMutation.mutateAsync(id);
          }
        } catch (error) {
          console.error(`„É°„É¢ÂâäÈô§„Ç®„É©„Éº (ID: ${id}):`, error);
        }
      }
    }
  };

  const handleBulkDelete = async () => {
    const targetIds =
      activeTab === "normal"
        ? Array.from(checkedMemos)
        : Array.from(checkedDeletedMemos);

    // ÂâäÈô§Ê∏à„Åø„É°„É¢„ÅÆÂ†¥Âêà„ÅØ1‰ª∂„Åã„Çâ„ÄÅÈÄöÂ∏∏„É°„É¢„ÅÆÂ†¥Âêà„ÅØ10‰ª∂„Åã„Çâ„É¢„Éº„ÉÄ„É´Ë°®Á§∫
    const threshold = activeTab === "deleted" ? 1 : 10;

    // ÂâäÈô§„Éú„Çø„É≥„ÇíÊäº„Åó„ÅüÁû¨Èñì„Å´Ëìã„ÇíÈñã„Åè
    if (activeTab === "normal") {
      setIsDeleting?.(true);
      setIsLidOpen?.(true);
    }

    console.log('üóëÔ∏è ÂâäÈô§ÈñãÂßã:', { targetIds: targetIds.length, activeTab });
    
    await bulkDelete.confirmBulkDelete(targetIds, threshold, executeDeleteWithAnimation);
  };

  const DeleteModal: React.FC = () => (
    <BulkDeleteConfirmation
      isOpen={bulkDelete.isModalOpen}
      onClose={() => {
        console.log('‚ùå „Ç≠„É£„É≥„Çª„É´');
        // „Ç≠„É£„É≥„Çª„É´ÊôÇ„Å´Ëìã„ÇíÈñâ„Åò„Çã
        setIsDeleting?.(false);
        setIsLidOpen?.(false);
        bulkDelete.handleCancel();
      }}
      onConfirm={async () => {
        console.log('üëç „É¢„Éº„ÉÄ„É´Á¢∫Ë™ç„Éú„Çø„É≥Êäº‰∏ã');
        await bulkDelete.handleConfirm(executeDeleteWithAnimation);
      }}
      count={bulkDelete.targetIds.length}
      itemType="memo"
      deleteType={activeTab === "normal" ? "normal" : "permanent"}
      isLoading={bulkDelete.isDeleting}
    />
  );

  return {
    handleBulkDelete,
    DeleteModal,
  };
}
