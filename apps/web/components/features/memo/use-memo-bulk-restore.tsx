import { useEffect } from 'react'
import { useRestoreNote } from '@/src/hooks/use-notes'
import { useBulkDelete, BulkRestoreConfirmation } from '@/components/ui/modals'
// import { animateItemsRestoreFadeOutCSS } from '@/src/utils/deleteAnimation'
import type { DeletedMemo } from '@/src/types/memo'
import React from 'react'
import { useAnimatedCounter } from '@/src/hooks/useAnimatedCounter'
import { calculateDeleteDuration } from '@/src/utils/deleteAnimation'

interface UseMemosBulkRestoreProps {
  checkedDeletedMemos: Set<number>
  setCheckedDeletedMemos: (memos: Set<number>) => void
  deletedNotes?: DeletedMemo[]
  onDeletedMemoRestore?: (id: number) => void
}

export function useMemosBulkRestore({
  checkedDeletedMemos,
  setCheckedDeletedMemos,
  deletedNotes,
  onDeletedMemoRestore
}: UseMemosBulkRestoreProps) {
  const restoreNoteMutation = useRestoreNote()
  const bulkRestore = useBulkDelete() // ÂâäÈô§„Å®Âêå„Åò„É¢„Éº„ÉÄ„É´„É≠„Ç∏„ÉÉ„ÇØ„Çí‰ΩøÁî®

  // „ÉÅ„Çß„ÉÉ„ÇØÁä∂ÊÖã„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó - Âæ©ÂÖÉ„Åï„Çå„Åü„É°„É¢„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„ÇíËß£Èô§
  useEffect(() => {
    if (deletedNotes) {
      const deletedMemoIds = new Set(deletedNotes.map(m => m.id))
      const newCheckedDeletedMemos = new Set(Array.from(checkedDeletedMemos).filter(id => deletedMemoIds.has(id)))
      if (newCheckedDeletedMemos.size !== checkedDeletedMemos.size) {
        setCheckedDeletedMemos(newCheckedDeletedMemos)
      }
    }
  }, [deletedNotes, checkedDeletedMemos, setCheckedDeletedMemos])

  // ÂÖ±ÈÄö„ÅÆÂæ©ÂÖÉÂá¶ÁêÜÈñ¢Êï∞
  const executeRestoreWithAnimation = async (ids: number[]) => {
    console.log('‚úÖ Âæ©ÂÖÉÂá¶ÁêÜÈñãÂßã:', { ids: ids.length });
    
    // 30‰ª∂‰ª•‰∏ä„ÅØÊúÄÂàù„ÅÆ30ÂÄã„Å†„Åë„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÄÅÊÆã„Çä„ÅØ‰∏ÄÊã¨Âæ©ÂÖÉ
    if (ids.length > 30) {
      console.log('üé¨‚û°Ô∏è‚ö° Ê∑∑ÂêàÂæ©ÂÖÉ„É¢„Éº„Éâ:', { count: ids.length });
      
      // ÊúÄÂàù„ÅÆ30ÂÄã„Çí„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
      const animatedIds = ids.slice(0, 30);
      const bulkIds = ids.slice(30);
      
      console.log('üé¨ ÊúÄÂàù„ÅÆ30ÂÄã„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥:', { animated: animatedIds.length, bulk: bulkIds.length });
      
      const { animateBulkFadeOutCSS } = await import('@/src/utils/deleteAnimation');
      animateBulkFadeOutCSS(animatedIds, async () => {
        console.log('üé¨ ÊúÄÂàù„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü„ÄÅ‰∏ÄÊã¨Âæ©ÂÖÉÈñãÂßã:', { bulk: bulkIds.length });
        
        // ÊÆã„Çä„Çí‰∏ÄÊã¨„ÅßStateÊõ¥Êñ∞
        for (const id of bulkIds) {
          onDeletedMemoRestore?.(id);
        }
        
        // ÈÅ∏ÊäûÁä∂ÊÖã„Çí„ÇØ„É™„Ç¢ÔºàÂâäÈô§ÂÅ¥„Å®Âêå„ÅòÂàÜÂâ≤Âá¶ÁêÜÔºâ
        const newCheckedDeletedMemos = new Set(checkedDeletedMemos);
        ids.forEach(id => newCheckedDeletedMemos.delete(id));
        setCheckedDeletedMemos(newCheckedDeletedMemos);
        
        console.log('‚ö° Ê∑∑ÂêàÂæ©ÂÖÉÂÆå‰∫Ü:', { animated: animatedIds.length, bulk: bulkIds.length });
      }, 120, 'restore', async (id: number) => {
        // ÂêÑ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Ç¢„Ç§„ÉÜ„É†„ÅÆÂÄãÂà•Âá¶ÁêÜÔºàÂâäÈô§ÂÅ¥„Å®Âêå„Åò„Éë„Çø„Éº„É≥Ôºâ
        console.log('üéØ ÂÄãÂà•Âæ©ÂÖÉ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü:', { id });
        onDeletedMemoRestore?.(id);
        
        try {
          await restoreNoteMutation.mutateAsync(id);
          console.log('üåê ÂÄãÂà•Âæ©ÂÖÉAPIÂÆå‰∫Ü:', { id });
        } catch (error) {
          console.error(`ÂÄãÂà•Âæ©ÂÖÉ„Ç®„É©„Éº (ID: ${id}):`, error);
        }
      });
      
      // ÊÆã„Çä„ÅÆAPIÂá¶ÁêÜ„Çí„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂÆüË°å
      setTimeout(async () => {
        console.log('üåê ÊÆã„Çä„ÅÆAPIÂá¶ÁêÜÈñãÂßã:', { count: bulkIds.length });
        for (const id of bulkIds) {
          try {
            await restoreNoteMutation.mutateAsync(id);
          } catch (error) {
            console.error(`‰∏ÄÊã¨Âæ©ÂÖÉ„Ç®„É©„Éº (ID: ${id}):`, error);
          }
        }
        console.log('üåê ÊÆã„Çä„ÅÆAPIÂá¶ÁêÜÂÆå‰∫Ü:', { count: bulkIds.length });
      }, 1000);
      
      return;
    }
    
    // 30‰ª∂‰ª•‰∏ã„ÅØ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„ÅçÂæ©ÂÖÉ
    console.log('üé¨ „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Âæ©ÂÖÉ:', { count: ids.length });
    const { animateBulkFadeOutCSS } = await import('@/src/utils/deleteAnimation');
    animateBulkFadeOutCSS(ids, async () => {
      console.log('üåü ÂÖ®„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü:', { ids: ids.length });
      
      // ÈÅ∏ÊäûÁä∂ÊÖã„Çí„ÇØ„É™„Ç¢
      setCheckedDeletedMemos(new Set());
    }, 120, 'restore', async (id: number) => {
      // ÂêÑ„Ç¢„Ç§„ÉÜ„É†„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÊôÇ„Å´ÂÄãÂà•DOMÊìç‰Ωú + APIÂÆüË°å
      console.log('üéØ ÂÄãÂà•Âæ©ÂÖÉ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü:', { id });
      onDeletedMemoRestore?.(id);
      
      try {
        await restoreNoteMutation.mutateAsync(id);
        console.log('üåê ÂÄãÂà•Âæ©ÂÖÉAPIÂÆå‰∫Ü:', { id });
      } catch (error) {
        console.error(`Âæ©ÂÖÉ„Ç®„É©„Éº (ID: ${id}):`, error);
      }
    });
  };

  const handleBulkRestore = async () => {
    const targetIds = Array.from(checkedDeletedMemos)

    // „É°„É¢„ÅÆÂ†¥Âêà„ÅØ1‰ª∂„Åã„Çâ„É¢„Éº„ÉÄ„É´Ë°®Á§∫
    const threshold = 1

    console.log('üîÑ Âæ©ÂÖÉÈñãÂßã:', { targetIds: targetIds.length });
    
    await bulkRestore.confirmBulkDelete(targetIds, threshold, async (ids: number[]) => {
      // „Ç´„Ç¶„É≥„Çø„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã
      animatedCounter.startAnimation();
      await executeRestoreWithAnimation(ids);
    })
  }

  const RestoreModal: React.FC = () => (
    <BulkRestoreConfirmation
      isOpen={bulkRestore.isModalOpen}
      onClose={() => {
        // „Ç´„Ç¶„É≥„Çø„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÅúÊ≠¢
        animatedCounter.stopAnimation();
        bulkRestore.handleCancel();
      }}
      onConfirm={async () => {
        console.log('üëç „É¢„Éº„ÉÄ„É´Âæ©ÂÖÉÁ¢∫Ë™ç„Éú„Çø„É≥Êäº‰∏ã');
        await bulkRestore.handleConfirm(executeRestoreWithAnimation);
      }}
      count={bulkRestore.targetIds.length}
      itemType="memo"
      isLoading={bulkRestore.isDeleting}
    />
  );

  // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„Åç„Ç´„Ç¶„É≥„Çø„ÉºÔºàÂæ©ÂÖÉÂá¶ÁêÜÁî®Ôºâ
  const animatedCounter = useAnimatedCounter({
    totalItems: checkedDeletedMemos.size,
    remainingItems: 0, // Âæ©ÂÖÉÂæå„ÅØÂâäÈô§Ê∏à„Åø‰∏ÄË¶ß„Åã„Çâ0„Å´„Å™„Çã
    animationDuration: calculateDeleteDuration(checkedDeletedMemos.size),
    updateInterval: 200,
    onComplete: () => {
      console.log('üéä Âæ©ÂÖÉ„Ç´„Ç¶„É≥„Çø„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü');
    }
  });

  return {
    handleBulkRestore,
    RestoreModal,
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„Åç„Ç´„Ç¶„É≥„Çø„Éº
    animatedRestoreCount: animatedCounter.currentCount,
    isRestoreCounterAnimating: animatedCounter.isAnimating,
    startRestoreCounterAnimation: animatedCounter.startAnimation,
    stopRestoreCounterAnimation: animatedCounter.stopAnimation,
  }
}